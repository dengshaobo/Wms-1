package com.hzx.wms.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hzx.wms.bean.WeightBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEIGHT_BEAN".
*/
public class WeightBeanDao extends AbstractDao<WeightBean, Void> {

    public static final String TABLENAME = "WEIGHT_BEAN";

    /**
     * Properties of entity WeightBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Logistics_no = new Property(0, String.class, "logistics_no", false, "LOGISTICS_NO");
        public final static Property Weight = new Property(1, String.class, "weight", false, "WEIGHT");
    }


    public WeightBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WeightBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEIGHT_BEAN\" (" + //
                "\"LOGISTICS_NO\" TEXT," + // 0: logistics_no
                "\"WEIGHT\" TEXT);"); // 1: weight
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEIGHT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeightBean entity) {
        stmt.clearBindings();
 
        String logistics_no = entity.getLogistics_no();
        if (logistics_no != null) {
            stmt.bindString(1, logistics_no);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(2, weight);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeightBean entity) {
        stmt.clearBindings();
 
        String logistics_no = entity.getLogistics_no();
        if (logistics_no != null) {
            stmt.bindString(1, logistics_no);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(2, weight);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public WeightBean readEntity(Cursor cursor, int offset) {
        WeightBean entity = new WeightBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // logistics_no
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // weight
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeightBean entity, int offset) {
        entity.setLogistics_no(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setWeight(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(WeightBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(WeightBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(WeightBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
